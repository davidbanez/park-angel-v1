import { createClient } from '@supabase/supabase-js';
import { OperatorProfile, OperatorBankDetails, OperatorRevenueConfig, OperatorRemittance, VIPAssignment, OperatorPerformanceMetrics, CreateOperatorProfileData, CreateOperatorBankDetailsData, CreateOperatorRevenueConfigData, CreateVIPAssignmentData, UpdateOperatorProfileData, OperatorSummary, OperatorDashboardMetrics, RemittanceCalculation } from '../types/operator';
export interface OperatorManagementService {
    createOperatorProfile(data: CreateOperatorProfileData): Promise<OperatorProfile>;
    getOperatorProfile(operatorId: string): Promise<OperatorProfile | null>;
    updateOperatorProfile(operatorId: string, data: UpdateOperatorProfileData): Promise<OperatorProfile>;
    verifyOperator(operatorId: string, verifiedBy: string): Promise<void>;
    createBankDetails(data: CreateOperatorBankDetailsData): Promise<OperatorBankDetails>;
    getBankDetails(operatorId: string): Promise<OperatorBankDetails[]>;
    updateBankDetails(bankDetailId: string, data: Partial<CreateOperatorBankDetailsData>): Promise<OperatorBankDetails>;
    setPrimaryBankAccount(bankDetailId: string): Promise<void>;
    verifyBankAccount(bankDetailId: string, verifiedBy: string): Promise<void>;
    createRevenueConfig(data: CreateOperatorRevenueConfigData): Promise<OperatorRevenueConfig>;
    getRevenueConfigs(operatorId: string): Promise<OperatorRevenueConfig[]>;
    updateRevenueConfig(configId: string, operatorPercentage: number, parkAngelPercentage: number): Promise<OperatorRevenueConfig>;
    createVIPAssignment(data: CreateVIPAssignmentData): Promise<VIPAssignment>;
    getVIPAssignments(operatorId: string): Promise<VIPAssignment[]>;
    updateVIPAssignment(assignmentId: string, data: Partial<CreateVIPAssignmentData>): Promise<VIPAssignment>;
    deactivateVIPAssignment(assignmentId: string): Promise<void>;
    calculateRemittance(operatorId: string, periodStart: Date, periodEnd: Date): Promise<RemittanceCalculation>;
    createRemittance(operatorId: string, calculation: RemittanceCalculation): Promise<OperatorRemittance>;
    getRemittances(operatorId: string): Promise<OperatorRemittance[]>;
    processRemittance(remittanceId: string, processedBy: string, paymentReference: string): Promise<void>;
    getAllOperators(): Promise<OperatorSummary[]>;
    getOperatorDashboardMetrics(operatorId: string): Promise<OperatorDashboardMetrics>;
    getOperatorPerformanceMetrics(operatorId: string, startDate?: Date, endDate?: Date): Promise<OperatorPerformanceMetrics[]>;
}
export declare class OperatorManagementServiceImpl implements OperatorManagementService {
    private supabase;
    constructor(supabase: ReturnType<typeof createClient>);
    createOperatorProfile(data: CreateOperatorProfileData): Promise<OperatorProfile>;
    getOperatorProfile(operatorId: string): Promise<OperatorProfile | null>;
    updateOperatorProfile(operatorId: string, data: UpdateOperatorProfileData): Promise<OperatorProfile>;
    verifyOperator(operatorId: string): Promise<void>;
    createBankDetails(data: CreateOperatorBankDetailsData): Promise<OperatorBankDetails>;
    getBankDetails(operatorId: string): Promise<OperatorBankDetails[]>;
    updateBankDetails(bankDetailId: string, data: Partial<CreateOperatorBankDetailsData>): Promise<OperatorBankDetails>;
    setPrimaryBankAccount(bankDetailId: string): Promise<void>;
    verifyBankAccount(bankDetailId: string): Promise<void>;
    createRevenueConfig(data: CreateOperatorRevenueConfigData): Promise<OperatorRevenueConfig>;
    getRevenueConfigs(operatorId: string): Promise<OperatorRevenueConfig[]>;
    updateRevenueConfig(configId: string, operatorPercentage: number, parkAngelPercentage: number): Promise<OperatorRevenueConfig>;
    createVIPAssignment(data: CreateVIPAssignmentData): Promise<VIPAssignment>;
    getVIPAssignments(operatorId: string): Promise<VIPAssignment[]>;
    updateVIPAssignment(assignmentId: string, data: Partial<CreateVIPAssignmentData>): Promise<VIPAssignment>;
    deactivateVIPAssignment(assignmentId: string): Promise<void>;
    calculateRemittance(operatorId: string, periodStart: Date, periodEnd: Date): Promise<RemittanceCalculation>;
    createRemittance(operatorId: string, calculation: RemittanceCalculation): Promise<OperatorRemittance>;
    getRemittances(operatorId: string): Promise<OperatorRemittance[]>;
    processRemittance(remittanceId: string, processedBy: string, paymentReference: string): Promise<void>;
    getAllOperators(): Promise<OperatorSummary[]>;
    getOperatorDashboardMetrics(operatorId: string): Promise<OperatorDashboardMetrics>;
    getOperatorPerformanceMetrics(operatorId: string, startDate?: Date, endDate?: Date): Promise<OperatorPerformanceMetrics[]>;
    private mapOperatorProfile;
    private mapBankDetails;
    private mapRevenueConfig;
    private mapVIPAssignment;
    private mapRemittance;
    private mapPerformanceMetrics;
}
